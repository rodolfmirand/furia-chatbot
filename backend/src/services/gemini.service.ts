import { GenerativeModel, GoogleGenerativeAI } from '@google/generative-ai';
import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ApiResponseDTO } from 'src/models/responseDTO/api.response.dto';
import { PromptFindAllService } from './prompt.findall.service';
import { PromptModel } from 'src/models/prompt.model';
import { PromptSaveService } from './prompt.save.service';

@Injectable()
export class GeminiService {

    private genAI: GoogleGenerativeAI;
    private model: GenerativeModel

    constructor(private configService: ConfigService, private promptSaveService: PromptSaveService, private promptFindAllService: PromptFindAllService) {
        const apiKey = this.configService.get('GEMINI_API_KEY');

        if (!apiKey) {
            throw new InternalServerErrorException('GEMINI_API_KEY is not defined.');
        }

        this.genAI = new GoogleGenerativeAI(apiKey);

        const geminiModel = this.configService.get('GEMINI_API_MODEL');

        if (!geminiModel) {
            throw new InternalServerErrorException('GEMINI_API_MODEL is not defined.');
        }

        this.model = this.genAI.getGenerativeModel({ model: geminiModel });
    }

    async generateText(userPrompt: string) {
        let prompt =
            `
Voc√™ √© um chatbot dedicado a fornecer informa√ß√µes sobre o time FURIA de CS:GO. Seu √∫nico foco deve ser o time de CS:GO FURIA e tudo relacionado a ele. 

Voc√™ deve responder somente a perguntas ou solicita√ß√µes que envolvam:
- Informa√ß√µes sobre o time FURIA: Como hist√≥rico, conquistas, performance, jogadores e estrutura da equipe de CS:GO.
- Jogadores do time FURIA: Dados sobre os membros atuais, suas estat√≠sticas, desempenho nas √∫ltimas partidas, e informa√ß√µes sobre transfer√™ncias ou atualiza√ß√µes.
- Partidas e torneios: Resultados de jogos passados, pr√≥ximos jogos, detalhes sobre competi√ß√µes e eventos em que a FURIA est√° participando.
- Not√≠cias e atualiza√ß√µes do time: Informa√ß√µes novas relacionadas ao time, como an√∫ncios ou mudan√ßas no elenco, patroc√≠nios, etc.

‚ùóEvite fornecer qualquer tipo de informa√ß√£o fora desse escopo, como: 
- Assuntos n√£o relacionados ao CS:GO
- Outros times ou esportes (apenas se a pergunta envolver a Furia)
- Not√≠cias n√£o vinculadas ao time FURIA ou qualquer conversa geral
- Mantenha o foco no universo do CS:GO e FURIA

üîí Caso o usu√°rio pe√ßa algo fora desse escopo, forne√ßa uma resposta educada informando que voc√™ s√≥ pode fornecer informa√ß√µes relacionadas ao time FURIA de CS:GO.

üìå Formato da resposta: envie a resposta formatada em uma √∫nica linha. N√£o use tags como contrabarra(n) ou contrabarra(t)

---
            
üìú Hist√≥rico de conversa com usu√°rio:\n`;

        const promptHistory = await this.promptFindAllService.findAll();

        promptHistory.forEach((p) => {
            prompt += `\n\nPergunta do usu√°rio: ${p.userPrompt} \nResposta da API: ${p.apiResponse}`;
        });

        prompt += '\n\n---\n\n'

        prompt += `üó£Ô∏è Texto atual do usu√°rio: ${userPrompt}`;

        const response = (await this.model.generateContent(prompt)).response.text();

        const cleanHtml = response
            .replace(/```html\n?/g, '')
            .replace(/```/g, '')
            .replace(/\n/g, '')
            .trim();

        await this.promptSaveService.save(userPrompt, cleanHtml);

        return new ApiResponseDTO(cleanHtml);
    }
}
